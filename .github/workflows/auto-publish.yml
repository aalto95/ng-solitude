name: Auto Publish

on:
  push:
    branches: [master]

jobs:
  publish:
    name: Publish Package
    runs-on: ubuntu-latest
    # Only run if this is not a tag push (to avoid double publishing)
    if: "!contains(github.ref, 'refs/tags/')"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history for conventional commits

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          registry-url: "https://registry.npmjs.org/"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Run tests and linting
        run: |
          npm run lint
          npm test -- --watch=false --browsers=ChromeHeadless

      - name: Build library
        run: npm run build

      - name: Determine version bump
        id: version
        run: |
          # Get the last commit message
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "Last commit: $COMMIT_MSG"

          # Check if this is a breaking change
          if echo "$COMMIT_MSG" | grep -q "BREAKING CHANGE\|!:"; then
            echo "bump=major" >> $GITHUB_OUTPUT
            echo "type=major" >> $GITHUB_OUTPUT
          # Check if this is a feature
          elif echo "$COMMIT_MSG" | grep -q "^feat"; then
            echo "bump=minor" >> $GITHUB_OUTPUT
            echo "type=minor" >> $GITHUB_OUTPUT
          # Check if this is a fix or other changes
          elif echo "$COMMIT_MSG" | grep -q "^fix\|^docs\|^style\|^refactor\|^perf\|^test\|^chore"; then
            echo "bump=patch" >> $GITHUB_OUTPUT
            echo "type=patch" >> $GITHUB_OUTPUT
          else
            echo "bump=patch" >> $GITHUB_OUTPUT
            echo "type=patch" >> $GITHUB_OUTPUT
          fi

      - name: Bump version
        id: bump-version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"

          # Bump version based on commit type
          if [ "${{ steps.version.outputs.bump }}" = "major" ]; then
            NEW_VERSION=$(npm version major --no-git-tag-version)
          elif [ "${{ steps.version.outputs.bump }}" = "minor" ]; then
            NEW_VERSION=$(npm version minor --no-git-tag-version)
          else
            NEW_VERSION=$(npm version patch --no-git-tag-version)
          fi

          echo "New version: $NEW_VERSION"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "version_number=${NEW_VERSION#v}" >> $GITHUB_OUTPUT

      - name: Update package.json in dist
        run: |
          # Copy the updated package.json to dist
          cp package.json dist/ng-solitude/
          cp package-lock.json dist/ng-solitude/ 2>/dev/null || true

      - name: Publish to npm
        run: |
          cd dist/ng-solitude
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create Git tag
        run: |
          git tag -a "${{ steps.bump-version.outputs.version }}" -m "Release ${{ steps.bump-version.outputs.version }}"
          git push origin "${{ steps.bump-version.outputs.version }}"

      - name: Commit version bump
        run: |
          git add package.json package-lock.json
          git commit -m "chore: bump version to ${{ steps.bump-version.outputs.version_number }}"
          git push origin master

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.bump-version.outputs.version }}
          release_name: Release ${{ steps.bump-version.outputs.version }}
          body: |
            ## Changes in ${{ steps.bump-version.outputs.version }}

            This release was automatically created from commit ${{ github.sha }}.

            **Version Type:** ${{ steps.version.outputs.type }}

            **Commit Message:** $(git log -1 --pretty=%B)
          draft: false
          prerelease: false
